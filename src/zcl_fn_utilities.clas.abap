class ZCL_FN_UTILITIES definition
  public
  final
  create public .

public section.

  class-methods RE_PROCESS
    importing
      !GUID type GUID .
  class-methods IS_PRD
    returning
      value(RESULT) type ABAP_BOOL .
  class-methods GET_DISTINCT_COUNT
    importing
      !TAB_DATA type ANY TABLE
      !FIELD_NAME type CLIKE
    returning
      value(COUNT) type INT4 .
  class-methods FM_AUTHORITY_CHECK
    importing
      !FM_NAME type RS38L_FNAM
      !BUFFER type ABAP_BOOL default ABAP_TRUE
    returning
      value(PASS) type ABAP_BOOL .
protected section.
private section.

      TYPES: BEGIN OF ty_auth_result,
             fname TYPE zafl_config-fname,
             pass  TYPE abap_bool,
           END OF ty_auth_result.

    CLASS-DATA: auth_results_list TYPE HASHED TABLE OF ty_auth_result WITH UNIQUE KEY fname.
ENDCLASS.



CLASS ZCL_FN_UTILITIES IMPLEMENTATION.


  METHOD FM_AUTHORITY_CHECK.
    DATA: AUTH_RESULT LIKE LINE OF AUTH_RESULTS_LIST.

    IF BUFFER = ABAP_TRUE.
      AUTH_RESULT = VALUE #( AUTH_RESULTS_LIST[ FNAME = FM_NAME ] OPTIONAL ).
      IF AUTH_RESULT IS NOT INITIAL.
        PASS = AUTH_RESULT-PASS.
        RETURN.
      ENDIF.
    ENDIF.

    IF AUTH_RESULT IS INITIAL.

      DELETE AUTH_RESULTS_LIST WHERE FNAME = FM_NAME.
      SELECT SINGLE NO_AUTH_CHECK FROM ZFN_LOG_CONFIG WHERE FNAME = @FM_NAME
        INTO @DATA(NO_AUTH_CHECK) BYPASSING BUFFER.

      IF NO_AUTH_CHECK = ABAP_TRUE.
        AUTH_RESULT = VALUE #( FNAME = FM_NAME PASS = ABAP_TRUE ).
      ELSE.
        DATA: WA_TADIR TYPE TADIR,
              AREA     TYPE SOBJ_NAME.

        SELECT SINGLE AREA FROM ENLFDIR WHERE FUNCNAME = @FM_NAME INTO @AREA.
        IF SY-SUBRC <> 0.
          RETURN.
        ENDIF.

        CALL FUNCTION 'TR_TADIR_INTERFACE'
          EXPORTING
            WI_TEST_MODUS     = ' '
            WI_READ_ONLY      = 'X'
            WI_TADIR_PGMID    = 'R3TR'
            WI_TADIR_OBJECT   = 'FUGR'
            WI_TADIR_OBJ_NAME = AREA
          IMPORTING
            NEW_TADIR_ENTRY   = WA_TADIR
          EXCEPTIONS
            OTHERS            = 1.

        IF SY-SUBRC <> 0 OR WA_TADIR-DEVCLASS IS INITIAL.
          AUTHORITY-CHECK OBJECT 'S_DEVELOP'
                 ID 'DEVCLASS' DUMMY
                 ID 'OBJTYPE' FIELD 'FUGR'
                 ID 'OBJNAME' FIELD AREA
                 ID 'P_GROUP' DUMMY
                 ID 'ACTVT' FIELD '16'.
        ELSE.
          AUTHORITY-CHECK OBJECT 'S_DEVELOP'
                 ID 'DEVCLASS' FIELD WA_TADIR-DEVCLASS
                 ID 'OBJTYPE' FIELD 'FUGR'
                 ID 'OBJNAME' FIELD AREA
                 ID 'P_GROUP' DUMMY
                 ID 'ACTVT' FIELD '16'.
        ENDIF.
        IF SY-SUBRC = 0.
          AUTH_RESULT = VALUE #( FNAME = FM_NAME PASS = ABAP_TRUE ).
        ELSE.
          AUTH_RESULT = VALUE #( FNAME = FM_NAME PASS = ABAP_FALSE ).
        ENDIF.

      ENDIF.
    ENDIF.

    PASS = AUTH_RESULT-PASS.

    INSERT AUTH_RESULT INTO TABLE AUTH_RESULTS_LIST.

  ENDMETHOD.


  METHOD GET_DISTINCT_COUNT.
    TYPES: BEGIN OF TY_TEMP,
             FIELD TYPE STRING,
           END OF TY_TEMP.
    DATA: COUNT_TABLE TYPE HASHED TABLE OF TY_TEMP WITH UNIQUE KEY FIELD,
          COUNT_WA    LIKE LINE OF COUNT_TABLE.

    LOOP AT TAB_DATA ASSIGNING FIELD-SYMBOL(<WA>).
      ASSIGN COMPONENT FIELD_NAME OF STRUCTURE <WA> TO FIELD-SYMBOL(<FIELD>).
      IF SY-SUBRC <> 0.
        RETURN.
      ELSE.
        COUNT_WA-FIELD = <FIELD>.
        INSERT COUNT_WA INTO TABLE COUNT_TABLE.
      ENDIF.
    ENDLOOP.

    COUNT = LINES( COUNT_TABLE ).
  ENDMETHOD.


  METHOD IS_PRD.
    DATA: ROLE TYPE T000-CCCATEGORY.

    CALL FUNCTION 'TR_SYS_PARAMS'
      IMPORTING
        SYSTEM_CLIENT_ROLE = ROLE
      EXCEPTIONS
        NO_SYSTEMNAME      = 1
        NO_SYSTEMTYPE      = 2
        OTHERS             = 3.
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

    IF ROLE = 'P'.
      RESULT = ABAP_TRUE.
    ENDIF.
  ENDMETHOD.


  METHOD RE_PROCESS.
    DATA: DATA_REF TYPE REF TO DATA.

    SELECT SINGLE GUID, FNAME, IMPORT, CHANGE_IN, TABLE_IN
      FROM ZFN_LOG
      WHERE GUID = @GUID
      INTO @DATA(RECORD).
    IF SY-SUBRC <> 0.
      RETURN.
    ENDIF.

    SELECT FUNCNAME, PARAMTYPE, PPOSITION, PARAMETER, STRUCTURE
      FROM FUPARAREF
      WHERE FUNCNAME = @RECORD-FNAME
      INTO TABLE @DATA(PARAMETERS_TAB).
    IF SY-SUBRC <> 0.
      RETURN.
    ENDIF.

    DATA: TEMP_DD04L TYPE STANDARD TABLE OF DD04L.
    LOOP AT PARAMETERS_TAB ASSIGNING FIELD-SYMBOL(<PTAB>).
      IF STRLEN( <PTAB>-STRUCTURE ) > 30.
        CONTINUE.
      ENDIF.
      TEMP_DD04L = VALUE #( BASE TEMP_DD04L ( DOMNAME = <PTAB>-STRUCTURE ) ).
    ENDLOOP.

    IF TEMP_DD04L IS NOT INITIAL.
      SELECT DOMNAME FROM DD04L
        FOR ALL ENTRIES IN @TEMP_DD04L
        WHERE DOMNAME = @TEMP_DD04L-DOMNAME
        INTO TABLE @DATA(DATA_ELEMENTS).
    ENDIF.

    DATA: FUNC      TYPE STRING,
          PTAB      TYPE ABAP_FUNC_PARMBIND_TAB,
          PTAB_LINE TYPE ABAP_FUNC_PARMBIND,
          ETAB      TYPE ABAP_FUNC_EXCPBIND_TAB,
          ETAB_LINE TYPE ABAP_FUNC_EXCPBIND.

    LOOP AT PARAMETERS_TAB ASSIGNING FIELD-SYMBOL(<PARAMETER>).

      CLEAR PTAB_LINE.
      PTAB_LINE-NAME = <PARAMETER>-PARAMETER.
      PTAB_LINE-KIND = COND #( WHEN <PARAMETER>-PARAMTYPE = 'E' THEN ABAP_FUNC_IMPORTING
                               WHEN <PARAMETER>-PARAMTYPE = 'I' THEN ABAP_FUNC_EXPORTING
                               WHEN <PARAMETER>-PARAMTYPE = 'T' THEN ABAP_FUNC_TABLES
                               WHEN <PARAMETER>-PARAMTYPE = 'C' THEN ABAP_FUNC_CHANGING
                               ELSE                                  ''
      ).

      DATA(JSON_FIELD_NAME) = COND STRING( WHEN PTAB_LINE-KIND = ABAP_FUNC_EXPORTING THEN 'IMPORT'
                                           WHEN PTAB_LINE-KIND = ABAP_FUNC_TABLES    THEN 'TABLE_IN'
                                           WHEN PTAB_LINE-KIND = ABAP_FUNC_CHANGING  THEN 'CHANGE_IN'
                                           ELSE                                           ''
      ).

      IF JSON_FIELD_NAME IS INITIAL.
        CONTINUE.
      ENDIF.

      ASSIGN COMPONENT JSON_FIELD_NAME OF STRUCTURE RECORD TO FIELD-SYMBOL(<JSON_RAW>).
      IF SY-SUBRC <> 0 OR <JSON_RAW> IS INITIAL.
        CONTINUE.
      ENDIF.

      DATA(JSON_DATA) = ZCL_FN_JSON=>GENERATE_NEW( JSON = <JSON_RAW> ).
      ASSIGN JSON_DATA->* TO FIELD-SYMBOL(<JSON_DATA>).


      ASSIGN COMPONENT <PARAMETER>-PARAMETER OF STRUCTURE <JSON_DATA> TO FIELD-SYMBOL(<PARAMETER_VAL>).
      IF SY-SUBRC <> 0.
        CONTINUE.
      ENDIF.

      IF PTAB_LINE-KIND = ABAP_FUNC_EXPORTING OR PTAB_LINE-KIND = ABAP_FUNC_CHANGING.

        CREATE DATA DATA_REF TYPE (<PARAMETER>-STRUCTURE).
        FIELD-SYMBOLS: <TEMP> TYPE ANY.
        ASSIGN <PARAMETER_VAL>->* TO <TEMP>.

      ENDIF.

      IF PTAB_LINE-KIND = ABAP_FUNC_TABLES.
        DATA(STRUCTURE_TYPE) = CAST CL_ABAP_STRUCTDESCR( CL_ABAP_DATADESCR=>DESCRIBE_BY_NAME( <PARAMETER>-STRUCTURE ) ).
        DATA(TABLE_TYPE) = CAST CL_ABAP_TABLEDESCR( CL_ABAP_TABLEDESCR=>CREATE( STRUCTURE_TYPE ) ).
        CREATE DATA DATA_REF TYPE HANDLE TABLE_TYPE.
        ASSIGN <PARAMETER_VAL>->* TO <TEMP>.
      ENDIF.

      IF DATA_REF IS BOUND.
        ASSIGN DATA_REF->* TO FIELD-SYMBOL(<DATA_REF>).
      ENDIF.

      IF LINE_EXISTS( DATA_ELEMENTS[ DOMNAME = <PARAMETER>-STRUCTURE ] ).
        <DATA_REF> = <TEMP>.
      ELSE.
        DATA(JSON_TEMP) = ZCL_FN_JSON=>SERIALIZE( DATA = <PARAMETER_VAL> ).
        ZCL_AFL_JSON=>DESERIALIZE( EXPORTING JSON = JSON_TEMP CHANGING DATA = <DATA_REF> ).
      ENDIF.

      GET REFERENCE OF <DATA_REF> INTO PTAB_LINE-VALUE.

      INSERT PTAB_LINE INTO TABLE PTAB.

    ENDLOOP.

    ETAB_LINE-NAME = 'OTHERS'.
    ETAB_LINE-VALUE = 2.
    INSERT ETAB_LINE INTO TABLE ETAB.

    CALL FUNCTION RECORD-FNAME
      PARAMETER-TABLE
      PTAB
      EXCEPTION-TABLE
      ETAB.
  ENDMETHOD.
ENDCLASS.
